// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetUserRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserRequest) Reset()         { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()    {}
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *GetUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUserRequest.Unmarshal(m, b)
}
func (m *GetUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUserRequest.Marshal(b, m, deterministic)
}
func (m *GetUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserRequest.Merge(m, src)
}
func (m *GetUserRequest) XXX_Size() int {
	return xxx_messageInfo_GetUserRequest.Size(m)
}
func (m *GetUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserRequest proto.InternalMessageInfo

func (m *GetUserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetUserRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type User struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Usertype             int32    `protobuf:"varint,4,opt,name=usertype,proto3" json:"usertype,omitempty"`
	Ip                   string   `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	Server               int32    `protobuf:"varint,6,opt,name=server,proto3" json:"server,omitempty"`
	Cash                 int64    `protobuf:"varint,7,opt,name=cash,proto3" json:"cash,omitempty"`
	Mail                 string   `protobuf:"bytes,8,opt,name=mail,proto3" json:"mail,omitempty"`
	CreatedAt            string   `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	DisabledAt           string   `protobuf:"bytes,10,opt,name=disabled_at,json=disabledAt,proto3" json:"disabled_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetUsertype() int32 {
	if m != nil {
		return m.Usertype
	}
	return 0
}

func (m *User) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *User) GetServer() int32 {
	if m != nil {
		return m.Server
	}
	return 0
}

func (m *User) GetCash() int64 {
	if m != nil {
		return m.Cash
	}
	return 0
}

func (m *User) GetMail() string {
	if m != nil {
		return m.Mail
	}
	return ""
}

func (m *User) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *User) GetDisabledAt() string {
	if m != nil {
		return m.DisabledAt
	}
	return ""
}

type RegisterRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Mail                 string   `protobuf:"bytes,2,opt,name=mail,proto3" json:"mail,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterRequest) Reset()         { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()    {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *RegisterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterRequest.Unmarshal(m, b)
}
func (m *RegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterRequest.Marshal(b, m, deterministic)
}
func (m *RegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRequest.Merge(m, src)
}
func (m *RegisterRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterRequest.Size(m)
}
func (m *RegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRequest proto.InternalMessageInfo

func (m *RegisterRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RegisterRequest) GetMail() string {
	if m != nil {
		return m.Mail
	}
	return ""
}

func (m *RegisterRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type RegisterResponse struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	UserID               string   `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterResponse) Reset()         { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()    {}
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *RegisterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterResponse.Unmarshal(m, b)
}
func (m *RegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterResponse.Marshal(b, m, deterministic)
}
func (m *RegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterResponse.Merge(m, src)
}
func (m *RegisterResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterResponse.Size(m)
}
func (m *RegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterResponse proto.InternalMessageInfo

func (m *RegisterResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *RegisterResponse) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Server struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Totalplayers         int32    `protobuf:"varint,2,opt,name=totalplayers,proto3" json:"totalplayers,omitempty"`
	Maxplayers           int32    `protobuf:"varint,3,opt,name=maxplayers,proto3" json:"maxplayers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Server) Reset()         { *m = Server{} }
func (m *Server) String() string { return proto.CompactTextString(m) }
func (*Server) ProtoMessage()    {}
func (*Server) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *Server) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Server.Unmarshal(m, b)
}
func (m *Server) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Server.Marshal(b, m, deterministic)
}
func (m *Server) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Server.Merge(m, src)
}
func (m *Server) XXX_Size() int {
	return xxx_messageInfo_Server.Size(m)
}
func (m *Server) XXX_DiscardUnknown() {
	xxx_messageInfo_Server.DiscardUnknown(m)
}

var xxx_messageInfo_Server proto.InternalMessageInfo

func (m *Server) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Server) GetTotalplayers() int32 {
	if m != nil {
		return m.Totalplayers
	}
	return 0
}

func (m *Server) GetMaxplayers() int32 {
	if m != nil {
		return m.Maxplayers
	}
	return 0
}

type GetServerResponse struct {
	Servers              []*Server `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetServerResponse) Reset()         { *m = GetServerResponse{} }
func (m *GetServerResponse) String() string { return proto.CompactTextString(m) }
func (*GetServerResponse) ProtoMessage()    {}
func (*GetServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}

func (m *GetServerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetServerResponse.Unmarshal(m, b)
}
func (m *GetServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetServerResponse.Marshal(b, m, deterministic)
}
func (m *GetServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServerResponse.Merge(m, src)
}
func (m *GetServerResponse) XXX_Size() int {
	return xxx_messageInfo_GetServerResponse.Size(m)
}
func (m *GetServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetServerResponse proto.InternalMessageInfo

func (m *GetServerResponse) GetServers() []*Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

type GetTavernResponse struct {
	Items                []byte   `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTavernResponse) Reset()         { *m = GetTavernResponse{} }
func (m *GetTavernResponse) String() string { return proto.CompactTextString(m) }
func (*GetTavernResponse) ProtoMessage()    {}
func (*GetTavernResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}

func (m *GetTavernResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTavernResponse.Unmarshal(m, b)
}
func (m *GetTavernResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTavernResponse.Marshal(b, m, deterministic)
}
func (m *GetTavernResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTavernResponse.Merge(m, src)
}
func (m *GetTavernResponse) XXX_Size() int {
	return xxx_messageInfo_GetTavernResponse.Size(m)
}
func (m *GetTavernResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTavernResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTavernResponse proto.InternalMessageInfo

func (m *GetTavernResponse) GetItems() []byte {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*GetUserRequest)(nil), "api.GetUserRequest")
	proto.RegisterType((*User)(nil), "api.User")
	proto.RegisterType((*RegisterRequest)(nil), "api.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "api.RegisterResponse")
	proto.RegisterType((*Empty)(nil), "api.Empty")
	proto.RegisterType((*Server)(nil), "api.Server")
	proto.RegisterType((*GetServerResponse)(nil), "api.GetServerResponse")
	proto.RegisterType((*GetTavernResponse)(nil), "api.GetTavernResponse")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0xed, 0x38, 0x89, 0x27, 0xa5, 0xc0, 0x50, 0xaa, 0x55, 0x24, 0x20, 0x5a, 0x09, 0x29,
	0x5c, 0x8a, 0x1a, 0x4e, 0x54, 0x5c, 0x82, 0x8a, 0xaa, 0x5e, 0x38, 0x18, 0x38, 0x22, 0xd8, 0xd6,
	0x23, 0x58, 0x35, 0x8e, 0x97, 0xdd, 0x6d, 0x21, 0xdf, 0xc0, 0x1f, 0x73, 0x42, 0x1e, 0xdb, 0xdb,
	0x24, 0x42, 0x08, 0x6e, 0x3b, 0xef, 0xcd, 0x9b, 0x99, 0x7d, 0x3b, 0x0b, 0x99, 0x32, 0xfa, 0xc8,
	0xd8, 0xca, 0x57, 0x98, 0x28, 0xa3, 0xe5, 0x2b, 0xd8, 0x3f, 0x23, 0xff, 0xc1, 0x91, 0xcd, 0xe9,
	0xdb, 0x35, 0x39, 0x8f, 0xfb, 0x10, 0xeb, 0x42, 0x44, 0xd3, 0x68, 0x96, 0xe5, 0xb1, 0x2e, 0x70,
	0x02, 0xa3, 0x6b, 0x47, 0x76, 0xa5, 0x4a, 0x12, 0x31, 0xa3, 0x21, 0x96, 0xbf, 0x22, 0xe8, 0xd7,
	0xda, 0xff, 0x11, 0xd5, 0x9c, 0x51, 0xce, 0x7d, 0xaf, 0x6c, 0x21, 0x92, 0x86, 0xeb, 0xe2, 0x4e,
	0xe7, 0xd7, 0x86, 0x44, 0x7f, 0x1a, 0xcd, 0xd2, 0x3c, 0xc4, 0xdc, 0xc3, 0x88, 0xb4, 0xed, 0x61,
	0xf0, 0x10, 0x06, 0x8e, 0xec, 0x0d, 0x59, 0x31, 0xe0, 0xcc, 0x36, 0x42, 0x84, 0xfe, 0xa5, 0x72,
	0x5f, 0xc5, 0x70, 0x1a, 0xcd, 0x92, 0x9c, 0xcf, 0x35, 0x56, 0x2a, 0xbd, 0x14, 0x23, 0x56, 0xf3,
	0x19, 0x1f, 0x01, 0x5c, 0x5a, 0x52, 0x9e, 0x8a, 0x4f, 0xca, 0x8b, 0x8c, 0x99, 0xac, 0x45, 0x16,
	0x1e, 0x9f, 0xc0, 0xb8, 0xd0, 0x4e, 0x5d, 0x2c, 0x1b, 0x1e, 0x98, 0x87, 0x0e, 0x5a, 0x78, 0xf9,
	0x11, 0xee, 0xe6, 0xf4, 0x45, 0x3b, 0x7f, 0xeb, 0xdd, 0xe6, 0xb5, 0xa3, 0x9d, 0x6b, 0x77, 0x23,
	0xc4, 0x1b, 0x23, 0xfc, 0xc5, 0x0a, 0x79, 0x02, 0xf7, 0x6e, 0xcb, 0x3b, 0x53, 0xad, 0x1c, 0x5b,
	0x50, 0x5d, 0x71, 0xe5, 0x51, 0x1e, 0x57, 0x57, 0xb5, 0x05, 0x75, 0xfd, 0xf3, 0xd3, 0xb6, 0x6a,
	0x1b, 0xc9, 0x21, 0xa4, 0x6f, 0x4a, 0xe3, 0xd7, 0xf2, 0x33, 0x0c, 0xde, 0x05, 0x57, 0x36, 0xc6,
	0xe2, 0x33, 0x4a, 0xd8, 0xf3, 0x95, 0x57, 0x4b, 0xb3, 0x54, 0x6b, 0xb2, 0x8e, 0x8b, 0xa4, 0xf9,
	0x16, 0x86, 0x8f, 0x01, 0x4a, 0xf5, 0xa3, 0xcb, 0x48, 0x38, 0x63, 0x03, 0x91, 0x27, 0x70, 0xff,
	0x8c, 0x7c, 0xd3, 0x24, 0xcc, 0xf9, 0x14, 0x86, 0xcd, 0x63, 0x38, 0x11, 0x4d, 0x93, 0xd9, 0x78,
	0x3e, 0x3e, 0xaa, 0xf7, 0xae, 0xcd, 0xea, 0x38, 0xf9, 0x8c, 0xb5, 0xef, 0xd5, 0x0d, 0xd9, 0x55,
	0xd0, 0x1e, 0x40, 0xaa, 0x3d, 0x95, 0x8e, 0x27, 0xdd, 0xcb, 0x9b, 0x60, 0xfe, 0x33, 0x86, 0x64,
	0x61, 0x34, 0x1e, 0xc3, 0x9d, 0x76, 0x5f, 0x5f, 0xaf, 0xdf, 0xd6, 0x77, 0x78, 0xc0, 0x95, 0xb7,
	0x77, 0x78, 0x92, 0x31, 0x58, 0x23, 0xb2, 0x87, 0xcf, 0x61, 0x1c, 0x24, 0xe7, 0xa7, 0xff, 0x20,
	0x78, 0x09, 0xa3, 0xce, 0x79, 0x3c, 0x60, 0x62, 0xe7, 0x9d, 0x27, 0x0f, 0x77, 0xd0, 0x66, 0x74,
	0xd9, 0xc3, 0x39, 0x40, 0x70, 0xc3, 0x21, 0x70, 0x1a, 0xbf, 0xc4, 0xe4, 0xb0, 0x6b, 0xbb, 0x6d,
	0x95, 0xec, 0xe1, 0x31, 0x64, 0xc1, 0x85, 0x3f, 0x4b, 0xb6, 0x1d, 0x92, 0xbd, 0x8b, 0x01, 0xff,
	0xe0, 0x17, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x39, 0xfb, 0x08, 0xce, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApiClient interface {
	GetUserByName(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	GetUserByID(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	GetServers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetServerResponse, error)
	GetTavern(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTavernResponse, error)
}

type apiClient struct {
	cc *grpc.ClientConn
}

func NewApiClient(cc *grpc.ClientConn) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) GetUserByName(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.Api/GetUserByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetUserByID(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.Api/GetUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/api.Api/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetServers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetServerResponse, error) {
	out := new(GetServerResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetTavern(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTavernResponse, error) {
	out := new(GetTavernResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetTavern", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
type ApiServer interface {
	GetUserByName(context.Context, *GetUserRequest) (*User, error)
	GetUserByID(context.Context, *GetUserRequest) (*User, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	GetServers(context.Context, *Empty) (*GetServerResponse, error)
	GetTavern(context.Context, *Empty) (*GetTavernResponse, error)
}

func RegisterApiServer(s *grpc.Server, srv ApiServer) {
	s.RegisterService(&_Api_serviceDesc, srv)
}

func _Api_GetUserByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetUserByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetUserByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetUserByName(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetUserByID(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetServers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetTavern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetTavern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetTavern",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetTavern(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Api_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByName",
			Handler:    _Api_GetUserByName_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _Api_GetUserByID_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Api_Register_Handler,
		},
		{
			MethodName: "GetServers",
			Handler:    _Api_GetServers_Handler,
		},
		{
			MethodName: "GetTavern",
			Handler:    _Api_GetTavern_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
